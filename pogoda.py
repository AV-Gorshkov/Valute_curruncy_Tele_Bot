# pip install requests aiogram

import os

import requests
from setting import TG_TOKEN, Pogoda_TOKEN

import telebot
import datetime
import time
import json



# from aiogram import Bot, types
# from aiogram.dispatcher import Dispatcher
# from aiogram.utils import executor

# bot = Bot(token='your_bot_token')

# bot = telebot.TeleBot(TG_TOKEN, skip_pending=True)

# Pogoda_TOKEN = 'b297aefdcbe2cb90cca6f16719a8d55f'
# @bot.message_handler()
# async def get_weather(message: types.Message):

# --- –ë–∞–∑–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
lang = "ru"
units = "metric"
api_weather_1 = f'http://api.openweathermap.org/data/2.5/weather?q='
api_weather_2 = f'&lang={lang}&units={units}&appid={Pogoda_TOKEN}'
api_weather_3 = f'http://api.openweathermap.org/data/2.5/forecast?lat='

# --- –ú–∞—Ä–∫–µ—Ä
user_marker = {}    # –º–∞—Ä–∫–µ—Ä —Å—Ü–µ–Ω–∞—Ä–∏—è: 1 - –∫—É—Ä—Å –≤–∞–ª—é—Ç—ã 2 - –ø–æ–≥–æ–¥–∞
predict_marker = {} # –º–∞—Ä–∫–µ—Ä —Å—Ü–µ–Ω–∞—Ä–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã
# dict_predicat = {}  # —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –Ω–∞ 5 –¥–Ω–µ–π

# --- —Å–º–∞–π–ª –ø–æ–≥–æ–¥—ã
code_to_smile = {
     "Clear": "–Ø—Å–Ω–æ \U00002600",
     "Clouds": "–û–±–ª–∞—á–Ω–æ \U000026C5",   #\U00002601"
     "Rain": "–î–æ–∂–¥—å \U00002614",
     "Drizzle": "–î–æ–∂–¥—å \U0001F326",
     "Thunderstorm": "–ì—Ä–æ–∑–∞ \U000026C8",
     "Snow": "–°–Ω–µ–≥ \U0001F328",
     "Fog": "–¢—É–º–∞–Ω \U0001F32B",
     "Mist": "–¢—É–º–∞–Ω \U0001F300"
}

# # get(f"http://api.openweathermap.org/data/2.5/weather?q=–º–æ—Å–∫–≤–∞&lang=ru&units=metric&appid={Pogoda_TOKEN}")


#-- –û–±—â–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
# --- –†–æ–∑–∞ –≤–µ—Ç—Ä–æ–≤  - –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–µ—Ç—Ä–∞ –ø–æ –≥—Ä–∞–¥.
def rose_wind(wind):
    """     –†–æ–∑–∞ –≤–µ—Ç—Ä–æ–≤
        23 < –Æ–ó <= 68
        68 < –ó <= 113
        113 < –°–ó <= 158
        158 < –° <= 203
        203 < –°–í <= 248
        248 < –í <= 293
        293 < –Æ–í <= 338
        338 < –Æ <= 360 and 0 < –Æ <= 23
    """
    speed = round( float(wind["speed"]), 1)  # –≤–µ—Ç–µ—Ä —Å–∫–æ—Ä–æ—Å—Ç—å
    deg = int(wind["deg"])     # –Ω–∞—Ä–ø–∞–≤–ª–µ–Ω–∏–µ –≤–µ—Ç—Ä–∞

    if 23 < deg <= 68:
        direct = f'–°–í ‚ÜôÔ∏è'
    elif 68 < deg <= 113:
        direct = f'–í ‚¨ÖÔ∏è'
    elif 113 < deg <= 158:
        direct = f'–Æ–í ‚ÜñÔ∏è'
    elif 158 < deg <= 203:
        direct = f'–Æ ‚¨ÜÔ∏èÔ∏è'
    elif 203 < deg <= 248:
        direct = f'–Æ–ó ‚ÜóÔ∏è'
    elif 248 < deg <= 293:
        direct = f'–ó ‚û°Ô∏è'
    elif 293 < deg <= 338:
        direct = f'–°–ó ‚ÜòÔ∏è'
    else:
        direct = f'–° ‚¨áÔ∏è'

    wind = f'{speed} {direct}'
    return wind

# --- –ó–∞–ø—Ä–æ—Å –∫ —Å–µ—Ä–≤–∏—Å—É –ø–æ–≥–æ–¥—ã
def api_weather(city_name):

    try:
        response = requests.get(f'{api_weather_1}{city_name}{api_weather_2}')
        data = response.json()
        return data
    except:
        text = "error"
        return text

# --- –ø–æ–≥–æ–¥–∞ –Ω–∞ 5 –¥–Ω–µ–π –≤–ø–µ—Ä–µ–¥
def api_predicat(lat, lon):

    try:
        response = requests.get(f'{api_weather_3}{lat}&lon={lon}{api_weather_2}')

        data = response.json()
        dict_param = {}       # —Å–ª–æ–≤–∞—Ä—å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ–≥–æ–¥—ã
        dict_predicat = {}    # —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Å–±–æ—Ä–∞ –¥–∞—Ç–∞-> –ø–æ–≥–æ–¥–∞

        # --- —Å–ø–∏—Å–æ–∫ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—è—Ü–∞
        month_list = ['–Ø–Ω–≤.', '–§–µ–≤.', '–ú–∞—Ä.', '–ê–ø—Ä.', '–ú–∞–π', '–ò—é–Ω.',\
                      '–ò—é–ª.', '–ê–≤–≥.', '–°–µ–Ω.', '–û–∫—Ç.', '–ù–æ—è.', '–î–µ–∫.']

        for i, line in enumerate(data['list']):

            dt_obj = datetime.datetime.strptime(line['dt_txt'], '%Y-%m-%d %H:%M:%S')   # –¥–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ü–ò–¢–û–ù–ê –î–∞—Ç–µ-–¢–∞–π–º

            # –±–µ—Ä–µ–º —á–∞—Å, –¥–µ–Ω—å –∏ –º–µ—Å—è—Ü –¥–ª—è –≤—ã–≤–æ–¥–∞ –Ω–∞ —ç–∫—Ä–∞–Ω
            int_Hours = int(datetime.datetime.strftime(dt_obj, '%H'))
            int_Mon = int(datetime.datetime.strftime(dt_obj, '%m'))
            int_Day = int(datetime.datetime.strftime(dt_obj, '%d'))
            data_next = datetime.datetime.strftime(dt_obj, '%Y-%m-%d')

            #  —Å–º–∞–π–ª –¥–ª—è —á–∞—Å–æ–≤
            if int_Hours < 7:
                p_time = f'üåó'
            elif int_Hours < 13:
                p_time = f'üåïÔ∏è'
            else:
                p_time = f'üåìÔ∏è'

            text_data = f'{int_Day} {month_list[int_Mon - 1]}'
            text_time = f'{p_time} {int_Hours}:00'

            temp = float(line["main"]["temp"])  # —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ —Å—Ä–µ–¥
            # temp_max = float(line["main"]["temp_max"])  # —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ max
            temp_feels = float(line["main"]["feels_like"])  # —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –ø–æ –æ—â—É—â–µ–Ω–∏—è–º
            humidity = line["main"]["humidity"]  # –≤–ª–∞–∂–Ω–æ—Å—Ç—å
            pressure = float(line["main"]["pressure"])  # –¥–∞–≤–ª–µ–Ω–∏–µ –≥–µ–∫—Ç–æ–ø–∞—Å–∫–∞–ª—å / 1,333
            wind = rose_wind(line["wind"])  # —Å–ª–æ–≤–∞—Ä—å —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –≤–µ—Ç—Ä–∞ –≤ —Ñ—É–Ω–∫—Ü–∏—é
            cur_weather = f"{round(temp, 1)}¬∞C (–æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ {round(temp_feels, 1)}¬∞C)"   # —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞

            # –ø–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–≥–æ–¥—ã –¥–ª—è —Å–º–∞–π–ª–∞
            weather_description = line["weather"][0]["main"]

            if weather_description in code_to_smile:
                wd = code_to_smile[weather_description]
            else:
                # –µ—Å–ª–∏ —ç–º–æ–¥–∑–∏ –¥–ª—è –ø–æ–≥–æ–¥—ã –Ω–µ—Ç, –≤—ã–≤–æ–¥–∏–º –¥—Ä—É–≥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                wd = "–ü–æ—Å–º–æ—Ç—Ä–∏–º –≤ –æ–∫–Ω–æ, —è –Ω–µ –ø–æ–Ω–∏–º–∞—é, —á—Ç–æ —Ç–∞–º –∑–∞ –ø–æ–≥–æ–¥–∞...\U0001F32A"

            param = f"{wd} {cur_weather}\n"

            if i == 0:
                # –ø–æ–≥–æ–¥–∞ –Ω–∞ —Å–µ–π—á–∞—Å
                data_start = datetime.datetime.strftime(dt_obj, '%Y-%m-%d')
                param_st = f"{param}–í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%\n–î–∞–≤–ª–µ–Ω–∏–µ: {round(pressure / 1.333, 1)} –º–º.—Ä—Ç.—Å—Ç\n–í–µ—Ç–µ—Ä –º/—Å: {wind}\n"
                dict_param[text_time] = param_st
                dict_predicat[text_data] = dict_param
            else:
                if data_start == data_next:
                    # –∑–∞–ø–∏—Å—å –≤ —Å–ª–æ–≤–∞—Ä—å –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã –Ω–∞ 6-12-18 —á–∞—Å–æ–≤
                    if int_Hours == 6 or int_Hours == 12:
                        param_12 = f"–í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%\n–î–∞–≤–ª–µ–Ω–∏–µ: {round(pressure / 1.333, 1)} –º–º.—Ä—Ç.—Å—Ç\n–í–µ—Ç–µ—Ä –º/—Å: {wind}\n"
                        dict_param[text_time] = param
                        dict_predicat[text_data] = dict_param
                    elif int_Hours == 18:
                        if len(param_12) == 0:
                            param_18 = f"{param}–í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%\n–î–∞–≤–ª–µ–Ω–∏–µ: {round(pressure / 1.333, 1)} –º–º.—Ä—Ç.—Å—Ç\n–í–µ—Ç–µ—Ä –º/—Å: {wind}\n"
                            dict_param[text_time] = param_18
                            dict_predicat[text_data] = dict_param
                        else:
                            dict_param[text_time] = f'{param}{param_12}'
                            dict_predicat[text_data] = dict_param
                    else:
                        pass
                else:
                    data_start = data_next
                    dict_param = {}

                    if int_Hours == 6 or int_Hours == 12:
                        param_12 = f"–í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%\n–î–∞–≤–ª–µ–Ω–∏–µ: {round(pressure / 1.333, 1)} –º–º.—Ä—Ç.—Å—Ç\n–í–µ—Ç–µ—Ä –º/—Å: {wind}\n"
                        dict_param[text_time] = param
                        dict_predicat[text_data] = dict_param
                    elif int_Hours == 18:
                        if len(param_12) == 0:
                            param_18 = f"{param}–í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%\n–î–∞–≤–ª–µ–Ω–∏–µ: {round(pressure / 1.333, 1)} –º–º.—Ä—Ç.—Å—Ç\n–í–µ—Ç–µ—Ä –º/—Å: {wind}\n"
                            dict_param[text_time] = param_18
                            dict_predicat[text_data] = dict_param
                        else:
                            dict_param[text_time] = f'{param}{param_12}'
                            dict_predicat[text_data] = dict_param

        return dict_predicat
    except:
        text = "error"
        return text

# ----- –∫–æ–º–∞–Ω–¥–∞ –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã /predict
@bot.message_handler(commands=['–ü—Ä–æ–≥–Ω–æ–∑', '–ø—Ä–æ–≥–Ω–æ–∑', '–ü–†–û–ì–ù–û–ó', 'predict', 'Predict', 'PREDICT'])
def predict(message):
    user_id = str(message.from_user.id)
    user_marker[user_id] = 2
    predict_marker[user_id] = 1

    bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞, –∏ —è –ø–æ–∫–∞–∂—É –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ –¥–Ω–∏')




 # = = = –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ = = =
@bot.message_handler(content_types=["text"])
def echo(message):

    user_id = str(message.from_user.id)
    city_name = message.text.lower().replace(" ","")

    predict_marker[user_id] = 1
    user_marker[user_id] = 2
#
# ----- —Å—Ü–µ–Ω–∞—Ä–∏–π –ü–æ–≥–æ–¥–∞
    if user_marker[user_id] == 2:

        # –∑–∞–ø—Ä–æ—Å –∫ —Å–µ—Ä–≤–µ—Ä—É –ø–æ–≥–æ–¥—ã
        data = api_weather(city_name)
        if data == "error":
            bot.send_message(message.chat.id, f'‚ùå C–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.\n–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –ø–æ–∑–∂–µ...‚è≥')

        elif data.get("name") is None:
            bot.send_message(message.chat.id, f'‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞')

        else:
        #  –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–∞—Ç
            if predict_marker[user_id] == 1:
                # –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≥–æ—Ä–æ–¥–∞ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
                lon = data["coord"]["lon"] # –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≥–æ—Ä–æ–¥–∞
                lat = data["coord"]["lat"] # –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≥–æ—Ä–æ–¥–∞
                city = data["name"]  # –≥–æ—Ä–æ–¥
                data = api_predicat(lat, lon)

                text = ""
                for dt, line in data.items():
                    text = f'{text}{dt}\n'
                    for hours, parm in line.items():
                        text = f'{text}{hours}: {parm}'
                    text = f'{text}\n'

                bot.send_message(message.chat.id, f'–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –≤ –≥–æ—Ä–æ–¥–µ {city}:\n{text}')

        #  –ø–æ–≥–æ–¥–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
            elif predict_marker[user_id] == 0:

                #  –ø–∞—Ä—Å–∏–º JSON –∑–∞–ø—Ä–æ—Å –ø–æ–≥–æ–¥—ã
                city = data["name"]          # –≥–æ—Ä–æ–¥
                temp_avg = float(data["main"]["temp"])          # —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ —Å—Ä–µ–¥–Ω—è—è
                temp_min = float(data["main"]["temp_min"])      # —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ min
                temp_max = float(data["main"]["temp_max"])      # —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ max
                temp_feels = float(data["main"]["feels_like"])  # —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –ø–æ –æ—â—É—â–µ–Ω–∏—è–º
                humidity = data["main"]["humidity"]             # –≤–ª–∞–∂–Ω–æ—Å—Ç—å
                pressure = float(data["main"]["pressure"])      # –¥–∞–≤–ª–µ–Ω–∏–µ –≥–µ–∫—Ç–æ–ø–∞—Å–∫–∞–ª—å / 1,333
                wind = rose_wind(data["wind"])                      # —Å–ª–æ–≤–∞—Ä—å —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –≤–µ—Ä—Ç—Ä–∞ –≤ —Ñ—É–Ω–∫—Ü–∏—é

                # wind = data["wind"]["speed"]                    # –≤–µ—Ç–µ—Ä —Å–∫–æ—Ä–æ—Å—Ç—å
                # rose_w = rose_wind( int(data["wind"]["deg"]) )  # –Ω–∞—Ä–ø–∞–≤–ª–µ–Ω–∏–µ –≤–µ—Ç—Ä–∞

                cur_weather = f'{round(temp_min,1)}¬∞...{round(temp_max,1)}¬∞C, –æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ {round(temp_feels,1)}¬∞C'  # —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞

                # –ø–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è —Ä–∞—Å—Å–≤–µ—Ç–∞ –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –µ–≥–æ –≤ —á–∏—Ç–∞–±–µ–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
                sunrise_timestamp = datetime.datetime.fromtimestamp(data["sys"]["sunrise"]).strftime('%H:%M')
                # bot.send_message(message.chat.id, sunrise_timestamp.strftime('%H:%M') )

                # —Ç–æ –∂–µ —Å–∞–º–æ–µ –ø—Ä–æ–¥–µ–ª–∞–µ–º —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º –∑–∞–∫–∞—Ç–∞
                sunset_timestamp = datetime.datetime.fromtimestamp(data["sys"]["sunset"]).strftime('%H:%M')
                # –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–Ω—è
                length_of_the_day = datetime.datetime.fromtimestamp(data["sys"]["sunset"]) - \
                                    datetime.datetime.fromtimestamp(data["sys"]["sunrise"])

                # –ø–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–≥–æ–¥—ã –¥–ª—è —Å–º–∞–π–ª–∞
                weather_description = data["weather"][0]["main"]

                if weather_description in code_to_smile:
                    wd = code_to_smile[weather_description]
                else:
                    # –µ—Å–ª–∏ —ç–º–æ–¥–∑–∏ –¥–ª—è –ø–æ–≥–æ–¥—ã –Ω–µ—Ç, –≤—ã–≤–æ–¥–∏–º –¥—Ä—É–≥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    wd = "–ü–æ—Å–º–æ—Ç—Ä–∏–º –≤ –æ–∫–Ω–æ, —è –Ω–µ –ø–æ–Ω–∏–º–∞—é, —á—Ç–æ —Ç–∞–º –∑–∞ –ø–æ–≥–æ–¥–∞...\U0001F32A"

                bot.send_message(message.chat.id, f"–ü–æ–≥–æ–¥–∞ –Ω–∞ {datetime.datetime.now().strftime('%Y-%m-%d %H:%M')}:\n"
                      f"–í –≥–æ—Ä–æ–¥–µ: {city}\n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {cur_weather}\n{wd}\n"
                      f"–í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%\n–î–∞–≤–ª–µ–Ω–∏–µ: {round(pressure / 1.333 , 1)} –º–º.—Ä—Ç.—Å—Ç\n–í–µ—Ç–µ—Ä –º/—Å: {wind}\n"
                      f"–í–æ—Å—Ö–æ–¥ —Å–æ–ª–Ω—Ü–∞: {sunrise_timestamp}\n–ó–∞–∫–∞—Ç —Å–æ–ª–Ω—Ü–∞: {sunset_timestamp}\n–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–Ω—è: {length_of_the_day}\n"
                     )

# ---–°—Ü–µ–Ω–∞—Ä–∏–π –∫—É—Ä—Å –≤–∞–ª—é—Ç
    elif user_marker[user_id] == 1:
        pass

# --- –Ω–µ—Ç –∫–æ–º–∞–Ω–¥—ã
    else:
        _text = ('‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.')
        buttons = [
            types.InlineKeyboardButton('–ú–µ–Ω—é', callback_data='menu'),
            types.InlineKeyboardButton('–û–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥', callback_data='info'),
            types.InlineKeyboardButton('–ü–æ–≥–æ–¥–∞', callback_data='weather'),
            types.InlineKeyboardButton('–ö—É—Ä—Å –≤–∞–ª—é—Ç—ã', callback_data='curr')
        ]
        keyboard = types.InlineKeyboardMarkup(row_width=2)  # –Ω–∞—à–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ (–∫–æ–ª-–≤–æ –∫–Ω–æ–ø–æ–∫ –≤ —Ä—è–¥)
        keyboard.add(*buttons)

        if user_marker[user_id] == 2:
            bot.send_message(message.chat.id, f'{_text}.\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞',reply_markup=keyboard)
        else:

            bot.send_message(message.chat.id, _text, reply_markup=keyboard)

while True:
  try:
    bot.polling(none_stop=True)
  except Exception as _ex:
    # print(_ex)
    time.sleep(15)

 #    –ø–æ—Å—Ç—Ä–æ—á–Ω—ã–π –≤—ã–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è
    # if len(str(data)) > 4096:
    #     for x in range(0, len(str(data)), 4096):
    #         bot.send_message(message.chat.id, str(data)[x:x + 4096])
    # else:
    #     bot.send_message(message.chat.id, str(data))

    # ----–ü—Ä–∏–º–µ—Ä
    # ob = '2023-08-25 21:00:00'
    #
    # dt_ob = datetime.datetime.strptime(ob, '%Y-%m-%d %H:%M:%S')
    #
    # text_H = int(datetime.datetime.strftime(dt_ob, '%H'))
    # text_M = int(datetime.datetime.strftime(dt_ob, '%m'))
    # text_D = int(datetime.datetime.strftime(dt_ob, '%d'))
    #
    # text_1 = datetime.datetime.strftime( \
    #     datetime.datetime.strptime(ob, '%Y-%m-%d %H:%M:%S'), \
    #     '%d %B. %H:%M')