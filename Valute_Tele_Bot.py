
import requests
from setting import TG_TOKEN, Pogoda_TOKEN

import telebot
from telebot import types
import datetime
import time
import re
import os
# import json

#===================
#    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º       # –¥–ª–∏–Ω–Ω–æ–µ       # —Å–æ–æ–±—â–µ–Ω–∏–µ       # –ø–æ       # —á–∞—Å—Ç—è–º
    # log_query = requests.get(api_log)    # - —Ç–µ–∫—Å—Ç –¥–ª–∏–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Å–∞–π—Ç–∞ —á–µ—Ä–µ–∑ API –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞

    # currency_dict = log_query.json()['Valute']    # –ø–µ—Ä–µ–≤–æ–¥ –≤ JSON –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞

    # todos = log_query.json()['Valute']   # –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON

    # if len(str(todos)) > 4096:
    #     for x in range(0, len(str(todos)), 4096):
    #         bot.send_message(message.chat.id, str(todos)[x:x + 4096])
    # else:
    #     bot.send_message(message.chat.id, str(todos))
# ==========================



#----- –î–ª—è REPL-IT
# # === –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ –ë–î Replit, –ø–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä–∞–±–æ—Ç—ã 24/7

# import os
# import requests
# from backgroud import keep_alive  #–∏–º–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
#
# # from replit import db
# # import base
#
# import pip
# pip.main(['install', 'pytelegrambotapi'])
#
# import telebot
# from telebot import types
# import time
# import datetime
# import json
# import re
#
#
# my_secret = os.environ['token']
# my_secret_2 = os.environ['Pogoda_TOKEN']
#
# bot = telebot.TeleBot(my_secret, skip_pending=True)
# -----------------------------


bot = telebot.TeleBot(TG_TOKEN, skip_pending=True)

# üíπüí∞üí¥üíµüí∂üí∑üí∏üí≤
# üìàüìâüìä

HELP = """
–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é!‚úåÔ∏è –Ø –ß–∞—Ç-–ë–æ—Ç! 
üìä –ü–æ–¥—Å–∫–∞–∂—É —Ç–µ–±–µ –∫—É—Ä—Å —Å–∞–º—ã—Ö –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –≤–∞–ª—é—Ç –Ω–∞ —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –ø–æ –∫—É—Ä—Å—É –¶–ë –†–§, –∏–ª–∏ –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –≤ —Ç–≤–æ–µ–º –≥–æ—Ä–æ–¥–µ! üå§Ô∏èü§∑‚Äç‚ôÇÔ∏è‚òî
–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ –±—ã —É–∑–Ω–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –∏ –∏—Ö –æ–ø–∏—Å–∞–Ω–∏–µ:
¬©Ô∏è
"""

#  ---------------- –æ–ø–∏—Å–∞–Ω–∏–µ –≤—ã–∑—ã–≤–∞–µ–º—ã—Ö –∫–æ–º–∞–Ω–¥
MENU = """‚úèÔ∏è –ö–æ–º–∞–Ω–¥—ã –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏:
/help - (–ùelp, –°–ø—Ä–∞–≤–∫–∞, ? ) - –≤—ã–∑–æ–≤ —Å–ø—Ä–∞–≤–∫–∏ –æ –ø—Ä–æ–≥—Ä–∞–º–º–µ, –∑–Ω–∞–∫–æ–º—Å—Ç–≤–æ —Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º.
/info - (Info, –û–ø–∏—Å–∞–Ω–∏–µ) - –æ–ø–∏—Å–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –∫–æ–º–∞–Ω–¥ –∏ –∫–Ω–æ–ø–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
/list - (List, –°–ø–∏—Å–æ–∫) - —Å–ø–∏—Å–æ–∫ –≤–∞–ª—é—Ç, –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞.
/end - (/End, /–û—Ç–º–µ–Ω–∞, /) -  –æ—Ç–º–µ–Ω–∞ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥.
/usd - (/Usd, /Eur) - –∫—É—Ä—Å –î–æ–ª–ª–∞—Ä–∞, –ï–≤—Ä–æ –∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å –ø—Ä–µ–¥—ã–¥—É—â–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ–º. 
/multy - (/Multy, /–ú—É–ª—å—Ç–∏) - –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä –≤–∞–ª—é—Ç.
/weather - (/Weather, /–ü–æ–≥–æ–¥–∞) - –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è.
/predict - (/predict, /–ü—Ä–æ–≥–Ω–æ–∑) - –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π.
/menu - (Menu, –ú–µ–Ω—é) - –ú–µ–Ω—é - —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
"""

INFO = """ –û–ø–∏—Å–∞–Ω–∏–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º:
‚úîÔ∏è –í—Å–µ –∫–æ–º–∞–Ω–¥—ã –∏–∑ —Å–ø–∏—Å–∫–∞ –≤ "Menu" –≤—ã–∑—ã–≤–∞—é—Ç—Å—è —á–µ—Ä–µ–∑ —Å–ª—ç—à "/" 
(–ü—Ä–∏–º–µ—Ä: /list, /usd, /weather, /Menu)
‚úîÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –∫—É—Ä—Å—É –¥–ª—è –æ–¥–Ω–æ–π –≤–∞–ª—é—Ç—ã - –≤–≤–µ—Å—Ç–∏ ID –≤–∞–ª—é—Ç—ã –∏–∑ —Å–ø–∏—Å–∫–∞ –≤–∞–ª—é—Ç
(–ü—Ä–∏–º–µ—Ä: eur, NZD, Usd)
‚úîÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–≥–æ–¥–µ –≤ –ª—é–±–æ–º –≥–æ—Ä–æ–¥–µ –º–∏—Ä–∞ - –≤–≤–µ—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞.
(–ü—Ä–∏–º–µ—Ä: –ú–æ—Å–∫–≤–∞, —Å–∞–Ω–∫—Ç-–ø–µ—Ç–µ—Ä–±—É—Ä–≥, PARIS, Viena)
‚úîÔ∏è –ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä –≤–∞–ª—é—Ç - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫—É—Ä—Å–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –≤–∞–ª—é—Ç. 
–í –∫–∞—á–µ—Å—Ç–≤–µ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è –º–æ–∂–µ—Ç –±—ã—Ç—å: —Ç–æ—á–∫–∞, —Ç–∏—Ä–µ, –ø—Ä–æ–±–µ–ª
(–ü—Ä–∏–º–µ—Ä: usd-eur, AUD . NOK, Czk Zar)
"""

# ===== –ë–ª–æ–∫ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
dict_currency = {}   # —Å–ª–æ–≤–∞—Ä—å –≤–∞–ª—é—Ç
# --- –ú–∞—Ä–∫–µ—Ä
user_marker = {}     # –º–∞—Ä–∫–µ—Ä —Å—Ü–µ–Ω–∞—Ä–∏—è: 1 - –∫—É—Ä—Å –≤–∞–ª—é—Ç—ã 2 - –ø–æ–≥–æ–¥–∞
predict_marker = {}  # –º–∞—Ä–∫–µ—Ä —Å—Ü–µ–Ω–∞—Ä–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã

# --- –ë–∞–∑–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã

time_mow = 10800 # —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ø–æ –ú–æ—Å–∫–≤–µ +3 —á - –¥–ª—è ReplIT

api_log = 'https://www.cbr-xml-daily.ru/daily_json.js'  # —Å–µ—Ä–≤–∏—Å –≤–∞–ª—é—Ç

# - —Å–µ—Ä–≤–∏—Å –ø–æ–≥–æ–¥—ã
lang = "ru"
units = "metric"
api_weather_1 = f'http://api.openweathermap.org/data/2.5/weather?q='
api_weather_2 = f'&lang={lang}&units={units}&appid={Pogoda_TOKEN}'
api_weather_3 = f'http://api.openweathermap.org/data/2.5/forecast?lat='

# --- —Å–ª–æ–≤–∞—Ä—å –∑–Ω–∞–∫–æ–≤ –≤–∞–ª—é—Ç—ã
dict_symbol = {"AUD": "$", "AZN": "‚Çº", "GBP":"¬£", "AMD":"‘¥", "BYN":"Br", "BGN":"–ª–≤", "BRL":"R$", "HUF":"Ft", "VND":"‚Ç´",
       "HKD":"$", "GEL":"‚Çæ", "DKK":"kr", "AED":"Dh", "USD":"$", "EUR":"‚Ç¨", "EGP":"¬£", "INR":"‡§∞", "IDR":"Rp",
       "KZT":"„Äí", "CAD":"$", "QAR": "Dh", "KGS":"—Å", "CNY":"ÂÖÉ", "MDL":"L", "NZD":"$", "NOK":"kr", "PLN":"z≈Ç",
       "RON":"L", "XDR": "XDR", "SGD": "$", "TJS": "—Å.", "THB": "‡∏ø", "TRY": "TL", "TMT": "m", "UZS": "—Å—û–º", "UAH": "‚Ç¥",
       "CZK":"Kƒç", "SEK":"kr", "CHF":"‚Ç£", "RSD":"RSD", "ZAR":"R", "KRW": "‚Ç©", "JPY": "¬•", "RUR": "‚ÇΩ"}

# --- —Å–º–∞–π–ª –ø–æ–≥–æ–¥—ã
code_to_smile = {
     "Clear": "–Ø—Å–Ω–æ \U00002600",
     "Clouds": "–û–±–ª–∞—á–Ω–æ \U000026C5",   #\U00002601"
     "Rain": "–î–æ–∂–¥—å \U00002614",
     "Drizzle": "–î–æ–∂–¥—å \U0001F326",
     "Thunderstorm": "–ì—Ä–æ–∑–∞ \U000026C8",
     "Snow": "–°–Ω–µ–≥ \U0001F328",
     "Fog": "–¢—É–º–∞–Ω \U0001F32B",
     "Mist": "–¢—É–º–∞–Ω \U0001F300"
}
# --- —Å–ø–∏—Å–æ–∫ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—è—Ü–∞
month_list = ['–Ø–Ω–≤.', '–§–µ–≤.', '–ú–∞—Ä.', '–ê–ø—Ä.', '–ú–∞–π', '–ò—é–Ω.', '–ò—é–ª.', '–ê–≤–≥.', '–°–µ–Ω.', '–û–∫—Ç.', '–ù–æ—è.', '–î–µ–∫.']

# = = = –û–±—â–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
# ---–∑–∞–ø—Ä–æ—Å –∫ —Å–µ—Ä–≤–µ—Ä—É –≤–∞–ª—é—Ç
def dict_curr():
    # –∑–∞–ø—Ä–æ—Å –∫ —Å–∞–π—Ç—É
    log_query = requests.get(api_log)
    currency_dict = log_query.json()['Valute']  # –ø–µ—Ä–µ–≤–æ–¥ –≤ JSON –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
    """
    —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ JSON
    {
        'CharCode': 'EUR',    - –∫–æ–¥ –≤–∞–ª—é—Ç—ã
        'ID': 'R01239',       - ID –Ω–æ–º–µ—Ä
        'Name': '–ï–≤—Ä–æ',       - –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞–ª—é—Ç—ã      
        'Nominal': 1,         - –Ω–æ–º–∏–Ω–∞–ª (–æ–±—ä–µ–º –ø—Ä–æ–¥–∞–∂–∏)  
        'NumCode': '978',     - –∫–æ–¥....
        'Previous': 79.6765,  - –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (–≤—á–µ—Ä–∞)
        'Value': 79.4966      - –∑–Ω–∞—á–µ–Ω–∏–µ —Å–µ–≥–æ–¥–Ω—è
            }
    """
    # —Å–æ–∑–¥–∞–Ω–∏–µ —Å–ª–æ–≤–∞—Ä—è:  { EUR :[–ï–≤—Ä–æ, 79.4966, 79.6765, 1,]}
    for curr, list_val in currency_dict.items():
        dict_currency[curr] = [list_val['Name'], round( float(list_val['Value']), 2), round( float(list_val['Previous']), 2), list_val['Nominal']]

    return dict_currency

# - - - —Å–ø–∏—Å–æ–∫ ID - –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞–ª—é—Ç—ã (EUR -  –ï–≤—Ä–æ)
def list_curr():
    list_valute = dict_curr()
    text = ''
    for key, val in list_valute.items():

        #  –≤—ã–≤–æ–¥ –∑–Ω–∞–∫–∞ –≤–∞–ª—é—Ç—ã –∏–∑ —Å–ª–æ–≤–∞—Ä—è dict_symbol
        if dict_symbol.get(key) is None:
            text = f'{text}/{key} - {val[0]}\n'
        else:
            symbol = dict_symbol[key]
            text = f'{text}/{key} - {val[0]} ({symbol})\n'
    return text

#  - - - –ö—É—Ä—Å –µ—Ä–≤–æ –∏ –¥–æ–ª–ª–∞—Ä–∞
def usd_eur():
    valute = dict_curr()  # –∑–∞–ø—Ä–æ—Å —Å–ª–æ–≤–∞—Ä—è –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏
    text = f'üíπ –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n'

    # $ USD —Ä–∞–∑–Ω–æ—Å—Ç—å –∫—É—Ä—Å–∞ —Å–µ–≥–æ–¥–Ω—è - –≤—á–µ—Ä–∞
    delta_usd = round(float(valute["USD"][1]) - float(valute["USD"][2]), 2)
    if delta_usd > 0:
        text_usd = f'USD {valute["USD"][1]} ‚ÇΩ –∑–∞ {valute["USD"][3]} $ (+{delta_usd}) üü¢ ‚¨ÜÔ∏è\n'
    elif delta_usd == 0:
        text_usd = f'USD {valute["USD"][1]} ‚ÇΩ –∑–∞ {valute["USD"][3]} $ ({delta_usd}) üü† ‚è∏Ô∏è\n'
    else:
        text_usd = f'USD {valute["USD"][1]} ‚ÇΩ –∑–∞ {valute["USD"][3]} $ (-{abs(delta_usd)}) üî¥ Ô∏è‚¨áÔ∏è\n'

    # ‚Ç¨ EUR —Ä–∞–∑–Ω–æ—Å—Ç—å –∫—É—Ä—Å–∞ —Å–µ–≥–æ–¥–Ω—è - –≤—á–µ—Ä–∞
    delta_eur = round(float(valute["EUR"][1]) - float(valute["EUR"][2]), 2)
    if delta_eur > 0:
        text_eur = f'EUR {valute["EUR"][1]} ‚ÇΩ –∑–∞ {valute["EUR"][3]} ‚Ç¨ (+{delta_eur}) üü¢ ‚¨ÜÔ∏è\n'
    elif delta_usd == 0:
        text_eur = f'EUR {valute["EUR"][1]} ‚ÇΩ –∑–∞ {valute["EUR"][3]} ‚Ç¨ ({delta_eur}) üü† ‚è∏Ô∏è\n'
    else:
        text_eur = f'EUR {valute["EUR"][1]} ‚ÇΩ –∑–∞ {valute["EUR"][3]} ‚Ç¨ (-{abs(delta_eur)}) üî¥ Ô∏è‚¨áÔ∏è\n'

    return text + text_usd + text_eur

#  - - -–ö—É—Ä—Å –ª—é–±–æ–π –≤–∞–ª—é—Ç—ã, –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def full_curr(word):
    valute = dict_curr()
    text_0 = f'üíπ –ö—É—Ä—Å –≤–∞–ª—é—Ç—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n{valute[word][0]}\n'

    # –∑–Ω–∞—á–æ–∫ –≤–∞–ª—é—Ç—ã –∏–∑ —Å–ª–æ–≤–∞—Ä—è
    if dict_symbol.get(word) is None:
        sym = ""
    else:
        sym = str(dict_symbol[word])

    # —Ä–∞–∑–Ω–æ—Å—Ç—å –∫—É—Ä—Å–∞ —Å–µ–≥–æ–¥–Ω—è - –≤—á–µ—Ä–∞
    delta = round(float(valute[word][1]) - float(valute[word][2]), 2)

    if delta > 0:
        text_1 = f'‚ÇΩ {valute[word][1]} –∑–∞ {valute[word][3]} {sym} (+{delta}) üü¢ ‚¨ÜÔ∏è'
    elif delta == 0:
        text_1 = f'‚ÇΩ {valute[word][1]} –∑–∞ {valute[word][3]} {sym} (+{delta}) üü† ‚è∏Ô∏è'
    else:
        text_1 = f'‚ÇΩ {valute[word][1]} –∑–∞ {valute[word][3]} {sym} (-{abs(delta)}) üî¥ Ô∏è‚¨áÔ∏è'

    return text_0 + text_1

# --- –†–æ–∑–∞ –≤–µ—Ç—Ä–æ–≤  - –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–µ—Ç—Ä–∞ –ø–æ –≥—Ä–∞–¥—É—Å–∞–º
def rose_wind(wind):
    """     –†–æ–∑–∞ –≤–µ—Ç—Ä–æ–≤
        23 < –Æ–ó <= 68
        68 < –ó <= 113
        113 < –°–ó <= 158
        158 < –° <= 203
        203 < –°–í <= 248
        248 < –í <= 293
        293 < –Æ–í <= 338
        338 < –Æ <= 360 and 0 < –Æ <= 23
    """
    speed = round( float(wind["speed"]), 1)  # –≤–µ—Ç–µ—Ä —Å–∫–æ—Ä–æ—Å—Ç—å
    deg = int(wind["deg"])     # –Ω–∞—Ä–ø–∞–≤–ª–µ–Ω–∏–µ –≤–µ—Ç—Ä–∞

    if 23 < deg <= 68:
        direct = f'–°–í ‚ÜôÔ∏è'
    elif 68 < deg <= 113:
        direct = f'–í ‚¨ÖÔ∏è'
    elif 113 < deg <= 158:
        direct = f'–Æ–í ‚ÜñÔ∏è'
    elif 158 < deg <= 203:
        direct = f'–Æ ‚¨ÜÔ∏èÔ∏è'
    elif 203 < deg <= 248:
        direct = f'–Æ–ó ‚ÜóÔ∏è'
    elif 248 < deg <= 293:
        direct = f'–ó ‚û°Ô∏è'
    elif 293 < deg <= 338:
        direct = f'–°–ó ‚ÜòÔ∏è'
    else:
        direct = f'–° ‚¨áÔ∏è'

    wind = f'{speed} {direct}'
    return wind

#  - —Å–º–∞–π–ª —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
def temp_smile(temp):
    if temp > 25:
        text = '\U0001F321'      #   üå°Ô∏è
    elif temp > 18:
        text = '\U0001F3D6'     # '\U000026F1'  üèñÔ∏è
    elif temp > 10:
        text = '\U0001F31E'           #   üåû
    elif temp > 3:
        text = '\U0001F9E2'     #\U0001F576'
    elif temp > -3:
        text = '\U00002744'
    elif temp < -10:
        text = '\U0001F9E3'
    elif temp < -20:
        text = '\U00002603'
    return text

# --- –ó–∞–ø—Ä–æ—Å –∫ —Å–µ—Ä–≤–∏—Å—É –ø–æ–≥–æ–¥—ã
def api_weather(city_name):

    try:
        response = requests.get(f'{api_weather_1}{city_name}{api_weather_2}')
        data = response.json()
        return data
    except:
        text = "error"
        return text

# --- –ø–æ–≥–æ–¥–∞ –Ω–∞ 5 –¥–Ω–µ–π –≤–ø–µ—Ä–µ–¥
def api_predicat(lat, lon):

    try:
        response = requests.get(f'{api_weather_3}{lat}&lon={lon}{api_weather_2}')

        data = response.json()
        dict_param = {}       # —Å–ª–æ–≤–∞—Ä—å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ–≥–æ–¥—ã
        dict_predicat = {}    # —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Å–±–æ—Ä–∞ –¥–∞—Ç–∞-> –ø–æ–≥–æ–¥–∞


        for i, line in enumerate(data['list']):

            dt_obj = datetime.datetime.strptime(line['dt_txt'], '%Y-%m-%d %H:%M:%S')   # –¥–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ü–ò–¢–û–ù–ê –î–∞—Ç–µ-–¢–∞–π–º

            # –±–µ—Ä–µ–º —á–∞—Å, –¥–µ–Ω—å –∏ –º–µ—Å—è—Ü –¥–ª—è –≤—ã–≤–æ–¥–∞ –Ω–∞ —ç–∫—Ä–∞–Ω
            int_Hours = int(datetime.datetime.strftime(dt_obj, '%H'))
            int_Mon = int(datetime.datetime.strftime(dt_obj, '%m'))
            int_Day = int(datetime.datetime.strftime(dt_obj, '%d'))
            data_next = datetime.datetime.strftime(dt_obj, '%Y-%m-%d')

            #  —Å–º–∞–π–ª –¥–ª—è —á–∞—Å–æ–≤
            if int_Hours < 7:
                p_time = f'üåó'
            elif int_Hours < 13:
                p_time = f'üåïÔ∏è'
            else:
                p_time = f'üåìÔ∏è'

            text_data = f'{int_Day} {month_list[int_Mon - 1]}'
            text_time = f'{p_time} {int_Hours}:00'

            temp = float(line["main"]["temp"])  # —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ —Å—Ä–µ–¥
            # temp_max = float(line["main"]["temp_max"])  # —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ max
            temp_feels = float(line["main"]["feels_like"])  # —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –ø–æ –æ—â—É—â–µ–Ω–∏—è–º
            humidity = line["main"]["humidity"]  # –≤–ª–∞–∂–Ω–æ—Å—Ç—å
            pressure = float(line["main"]["pressure"])  # –¥–∞–≤–ª–µ–Ω–∏–µ –≥–µ–∫—Ç–æ–ø–∞—Å–∫–∞–ª—å / 1,333
            wind = rose_wind(line["wind"])  # —Å–ª–æ–≤–∞—Ä—å —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –≤–µ—Ç—Ä–∞ –≤ —Ñ—É–Ω–∫—Ü–∏—é

            cur_weather = f"{round(temp, 1)}¬∞C (–æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ {round(temp_feels, 1)}¬∞C)" \
                          f" {temp_smile(round(temp_feels, 1))}"   # —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞

            # –ø–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–≥–æ–¥—ã –¥–ª—è —Å–º–∞–π–ª–∞
            weather_description = line["weather"][0]["main"]
            if weather_description in code_to_smile:
                wd = code_to_smile[weather_description]
            else:
                # –µ—Å–ª–∏ —ç–º–æ–¥–∑–∏ –¥–ª—è –ø–æ–≥–æ–¥—ã –Ω–µ—Ç, –≤—ã–≤–æ–¥–∏–º –¥—Ä—É–≥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                wd = "–ü–æ—Å–º–æ—Ç—Ä–∏–º –≤ –æ–∫–Ω–æ, —è –Ω–µ –ø–æ–Ω–∏–º–∞—é, —á—Ç–æ —Ç–∞–º –∑–∞ –ø–æ–≥–æ–¥–∞...\U0001F32A"

            param = f"{wd} {cur_weather}\n"

            if i == 0:
                # –ø–æ–≥–æ–¥–∞ –Ω–∞ —Å–µ–π—á–∞—Å
                data_start = datetime.datetime.strftime(dt_obj, '%Y-%m-%d')
                param_st = f"{param}–í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%\n–î–∞–≤–ª–µ–Ω–∏–µ: {round(pressure / 1.333, 1)} –º–º.—Ä—Ç.—Å—Ç\n–í–µ—Ç–µ—Ä –º/—Å: {wind}\n"
                dict_param[text_time] = param_st
                dict_predicat[text_data] = dict_param
            else:
                if data_start == data_next:
                    # –∑–∞–ø–∏—Å—å –≤ —Å–ª–æ–≤–∞—Ä—å –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã –Ω–∞ 6-12-18 —á–∞—Å–æ–≤
                    if int_Hours == 6 or int_Hours == 12:
                        param_12 = f"–í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%\n–î–∞–≤–ª–µ–Ω–∏–µ: {round(pressure / 1.333, 1)} –º–º.—Ä—Ç.—Å—Ç\n–í–µ—Ç–µ—Ä –º/—Å: {wind}\n"
                        dict_param[text_time] = param
                        dict_predicat[text_data] = dict_param
                    elif int_Hours == 18:
                        if len(param_12) == 0:
                            param_18 = f"{param}–í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%\n–î–∞–≤–ª–µ–Ω–∏–µ: {round(pressure / 1.333, 1)} –º–º.—Ä—Ç.—Å—Ç\n–í–µ—Ç–µ—Ä –º/—Å: {wind}\n"
                            dict_param[text_time] = param_18
                            dict_predicat[text_data] = dict_param
                        else:
                            dict_param[text_time] = f'{param}{param_12}'
                            dict_predicat[text_data] = dict_param
                    else:
                        pass
                else:
                    data_start = data_next
                    dict_param = {}

                    if int_Hours == 6 or int_Hours == 12:
                        param_12 = f"–í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%\n–î–∞–≤–ª–µ–Ω–∏–µ: {round(pressure / 1.333, 1)} –º–º.—Ä—Ç.—Å—Ç\n–í–µ—Ç–µ—Ä –º/—Å: {wind}\n"
                        dict_param[text_time] = param
                        dict_predicat[text_data] = dict_param
                    elif int_Hours == 18:
                        if len(param_12) == 0:
                            param_18 = f"{param}–í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%\n–î–∞–≤–ª–µ–Ω–∏–µ: {round(pressure / 1.333, 1)} –º–º.—Ä—Ç.—Å—Ç\n–í–µ—Ç–µ—Ä –º/—Å: {wind}\n"
                            dict_param[text_time] = param_18
                            dict_predicat[text_data] = dict_param
                        else:
                            dict_param[text_time] = f'{param}{param_12}'
                            dict_predicat[text_data] = dict_param

        return dict_predicat
    except:
        text = "error"
        return text

# ‚§µÔ∏è‚ÜîÔ∏è‚¨ÜÔ∏è‚¨áÔ∏èüîºüîºüîΩ‚è∏Ô∏èüü¢üî¥üü†‚§¥Ô∏è
# üí∏üí∞‚¨ÜÔ∏è‚¨áÔ∏èüîª


# = = = –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º
# ----- –ö—É—Ä—Å –≤–∞–ª—é—Ç—ã –∏–∑ —Å–ø–∏—Å–∫–∞ list_curr
@bot.message_handler(commands=[x for x in dict_curr().keys()])
def all_curr(message):
    user_id = str(message.from_user.id)
    user_marker[user_id] = 1
    #  —É–¥–∞–ª–µ–Ω–∏–µ —Å–ª–µ—à "\" –∏–∑ –∫–æ–º–∞–Ω–¥—ã –≤–∞–ª—é—Ç—ã \PLN
    word = message.text.replace("/", "")

    buttons = [
        types.InlineKeyboardButton('–ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä', callback_data='multy'),
        types.InlineKeyboardButton('–ö—É—Ä—Å USD/EUR', callback_data='UsdEur'),
        types.InlineKeyboardButton('–ü–æ–≥–æ–¥–∞', callback_data='weather'),
        types.InlineKeyboardButton('–û–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥', callback_data='info')
    ]
    keyboard = types.InlineKeyboardMarkup(row_width=2)  # –Ω–∞—à–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ (–∫–æ–ª-–≤–æ –∫–Ω–æ–ø–æ–∫ –≤ —Ä—è–¥)
    keyboard.add(*buttons)
    bot.send_message(message.chat.id, full_curr(word), reply_markup=keyboard)

# ----- –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã /predict
@bot.message_handler(commands=['–ü—Ä–æ–≥–Ω–æ–∑', '–ø—Ä–æ–≥–Ω–æ–∑', '–ü–†–û–ì–ù–û–ó', 'predict', 'Predict', 'PREDICT'])
def predict(message):
    user_id = str(message.from_user.id)
    user_marker[user_id] = 2
    predict_marker[user_id] = 1

    buttons = [
        types.InlineKeyboardButton('–û—Ç–º–µ–Ω–∞', callback_data='cancel'),
        types.InlineKeyboardButton('–ö—É—Ä—Å –≤–∞–ª—é—Ç', callback_data='list'),
        types.InlineKeyboardButton('–ú–µ–Ω—é', callback_data='menu'),
        types.InlineKeyboardButton('–û–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥', callback_data='info')
    ]
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    keyboard.add(*buttons)

    bot.send_message(message.chat.id, "üîÆ –ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞, –∏ —è –ø–æ–∫–∞–∂—É –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ –¥–Ω–∏", reply_markup=keyboard)

# -----  –°–ø—Ä–∞–≤–∫–∞
@bot.message_handler(
    commands=["–°–ø—Ä–∞–≤–∫–∞", "–°–ü–†–ê–í–ö–ê", "—Å–ø—Ä–∞–≤–∫–∞", "help", "Help", "HELP", "hElp", "heLp", "helP", "HElp", "HElP", "HELp",
              "hELp", "hELP", "heLp", "heLP", "?", "start", "START", "Start"])
def help(message):
    buttons = [
        types.InlineKeyboardButton('–ú–µ–Ω—é', callback_data='menu'),
        types.InlineKeyboardButton('–û–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥', callback_data='info'),
        types.InlineKeyboardButton('–ö—É—Ä—Å –≤–∞–ª—é—Ç', callback_data='list'),
        types.InlineKeyboardButton('–ü–æ–≥–æ–¥–∞', callback_data='weather')
    ]
    keyboard = types.InlineKeyboardMarkup(row_width=2)  # –Ω–∞—à–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ (–∫–æ–ª-–≤–æ –∫–Ω–æ–ø–æ–∫ –≤ —Ä—è–¥)
    keyboard.add(*buttons)

    bot.send_message(message.chat.id, HELP, reply_markup=keyboard)

# ----- –ú–µ–Ω—é
@bot.message_handler(commands=["menu", "MENU", "Menu", "–º–µ–Ω—é", "–ú–µ–Ω—é", "–ú–ï–ù–Æ","–º–ï–ù–Æ","–º–µ–ù–Æ","–º–µ–Ω–Æ"])
def menu(message):
    buttons = [
        types.InlineKeyboardButton('–û–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥', callback_data='info'),
        types.InlineKeyboardButton('–ö—É—Ä—Å –≤–∞–ª—é—Ç', callback_data='list'),
        types.InlineKeyboardButton('–ü–æ–≥–æ–¥–∞', callback_data='weather'),
        types.InlineKeyboardButton('–ö—É—Ä—Å USD/EUR', callback_data='UsdEur')
    ]
    keyboard = types.InlineKeyboardMarkup(row_width=2)  # –Ω–∞—à–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ (–∫–æ–ª-–≤–æ –∫–Ω–æ–ø–æ–∫ –≤ —Ä—è–¥)
    keyboard.add(*buttons)
    bot.send_message(message.chat.id, MENU, reply_markup=keyboard)

# ----- –ò–Ω—Ñ–æ - –æ–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥ –∏ –∫–Ω–æ–ø–æ–∫
@bot.message_handler(commands=["info", "INFO", "Info", "iNfo", "—Å–ø–∏—Å–æ–∫", "–°–ü–ò–°–û–ö","–°–ø–∏—Å–æ–∫"])
def info(message):
    buttons = [
        types.InlineKeyboardButton('–ú–µ–Ω—é', callback_data='menu'),
        types.InlineKeyboardButton('–ö—É—Ä—Å –≤–∞–ª—é—Ç', callback_data='list'),
        types.InlineKeyboardButton('–ü–æ–≥–æ–¥–∞', callback_data='weather'),
        types.InlineKeyboardButton('–ö—É—Ä—Å USD/EUR', callback_data='UsdEur')
    ]
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    keyboard.add(*buttons)
    bot.send_message(message.chat.id, INFO, reply_markup=keyboard)

# ------ –ö—É—Ä—Å USD –∏ EUR –µ–≤—Ä–æ ‚Ç¨, —Ä—É–±–ª—å ‚ÇΩ $
@bot.message_handler(commands=["usd", "USD", "Usd", "Eur", "eur", "EUR"])
def usdeur(message):
    # valute = dict_curr()  # –∑–∞–ø—Ä–æ—Å —Å–ª–æ–≤–∞—Ä—è –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏
    # text = f'–ö—É—Ä—Å—ã –≤–∞–ª—é—Ç –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n'
    #
    # # $ USD —Ä–∞–∑–Ω–æ—Å—Ç—å –∫—É—Ä—Å–∞ —Å–µ–≥–æ–¥–Ω—è - –≤—á–µ—Ä–∞
    # delta_usd = round(float(valute["USD"][1]) - float(valute["USD"][2]), 2)
    # if delta_usd > 0:
    #     text_usd = f'USD {valute["USD"][1]} ‚ÇΩ –∑–∞ {valute["USD"][3]} $ (+{delta_usd}) üü¢ üîº\n'
    # elif delta_usd == 0:
    #     text_usd = f'USD {valute["USD"][1]} ‚ÇΩ –∑–∞ {valute["USD"][3]} $ ({delta_usd}) üü† ‚è∏Ô∏è\n'
    # else:
    #     text_usd = f'USD {valute["USD"][1]} ‚ÇΩ –∑–∞ {valute["USD"][3]} $ (-{abs(delta_usd)}) üî¥ Ô∏èüîΩ\n'
    #
    # # ‚Ç¨ EUR —Ä–∞–∑–Ω–æ—Å—Ç—å –∫—É—Ä—Å–∞ —Å–µ–≥–æ–¥–Ω—è - –≤—á–µ—Ä–∞
    # delta_eur = round(float(valute["EUR"][1]) - float(valute["EUR"][2]), 2)
    # if delta_eur > 0:
    #     text_eur = f'EUR {valute["EUR"][1]} ‚ÇΩ –∑–∞ {valute["EUR"][3]} ‚Ç¨ (+{delta_eur}) üü¢ üîº\n'
    # elif delta_usd == 0:
    #     text_eur = f'EUR {valute["EUR"][1]} ‚ÇΩ –∑–∞ {valute["EUR"][3]} ‚Ç¨ ({delta_eur}) üü† ‚è∏Ô∏è\n'
    # else:
    #     text_eur = f'EUR {valute["EUR"][1]} ‚ÇΩ –∑–∞ {valute["EUR"][3]} ‚Ç¨ (-{abs(delta_eur)}) üî¥ Ô∏èüîΩ\n'

    user_id = str(message.from_user.id)
    user_marker[user_id] = 1

    buttons = [
        types.InlineKeyboardButton('–°–ø–∏—Å–æ–∫ –≤–∞–ª—é—Ç', callback_data='list'),
        types.InlineKeyboardButton('–ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä', callback_data='multy'),
        types.InlineKeyboardButton('–ü–æ–≥–æ–¥–∞', callback_data='weather'),
        types.InlineKeyboardButton('–û–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥', callback_data='info')
    ]
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    keyboard.add(*buttons)

    bot.send_message(message.chat.id, usd_eur(), reply_markup=keyboard)

# ------ –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≤–∞–ª—é—Ç
@bot.message_handler(commands=["list", "List", "LIST", "–°–ø–∏—Å–æ–∫", "—Å–ø–∏—Å–æ–∫", "–°–ü–ò–°–û–ö"])
def valute(message):
    user_id = str(message.from_user.id)
    user_marker[user_id] = 1

    buttons = [
        types.InlineKeyboardButton('–ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä', callback_data='multy'),
        types.InlineKeyboardButton('–ö—É—Ä—Å USD/EUR', callback_data='UsdEur'),
        types.InlineKeyboardButton('–ü–æ–≥–æ–¥–∞', callback_data='weather'),
        types.InlineKeyboardButton('–û–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥', callback_data='info')
    ]
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    keyboard.add(*buttons)
    bot.send_message(message.chat.id, f'üîñ –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∞–ª—é—Ç:\n{list_curr()}', reply_markup=keyboard)

# ----- –ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä –≤–∞–ª—é—Ç
@bot.message_handler(commands=["Multy","multy", "MULTY", "–ú—É–ª—å—Ç–∏", "–º—É–ª—å—Ç–∏", "–ú–£–õ–¨–¢–ò"])
def multy(message):
    user_id = str(message.from_user.id)
    user_marker[user_id] = 1

    text = '‚ôªÔ∏è –ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä –≤–∞–ª—é—Ç:\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –¥–≤—É—Ö –≤–∞–ª—é—Ç –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —á–µ—Ä–µ–∑ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å' \
           '(—Ç–∏—Ä–µ, –ø—Ä–æ–±–µ–ª, —Ç–æ—á–∫–∞)\n(–ü—Ä–∏–º–µ—Ä: usd-eur, AUD . NOK, Czk Zar)'
    buttons = [
        types.InlineKeyboardButton('–°–ø–∏—Å–æ–∫ –≤–∞–ª—é—Ç', callback_data='list'),
        types.InlineKeyboardButton('–ö—É—Ä—Å USD/EUR', callback_data='UsdEur'),
        types.InlineKeyboardButton('–ü–æ–≥–æ–¥–∞', callback_data='weather'),
        types.InlineKeyboardButton('–û–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥', callback_data='info')
    ]
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    keyboard.add(*buttons)
    bot.send_message(message.chat.id, text, reply_markup=keyboard)

# ----- –ü–æ–≥–æ–¥–∞
@bot.message_handler(commands=['–ü–æ–≥–æ–¥–∞', '–ü–û–ì–û–î–ê', '–ø–æ–≥–æ–¥–∞', 'Weather', 'weather','WEATHER'])
def weather_one(message):
    user_id = str(message.from_user.id)
    user_marker[user_id] = 2
    predict_marker[user_id] = 0

    buttons = [
        types.InlineKeyboardButton('–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã', callback_data='predict'),
        types.InlineKeyboardButton('–û–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥', callback_data='info'),
        types.InlineKeyboardButton('–ö—É—Ä—Å –≤–∞–ª—é—Ç', callback_data='list'),
        types.InlineKeyboardButton('–ö—É—Ä—Å USD/EUR', callback_data='UsdEur')
    ]
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    keyboard.add(*buttons)

    bot.send_message(message.chat.id, "üîÆ –ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞, –∏ —è –ø–æ–∫–∞–∂—É –∫–∞–∫–∞—è —Ç–∞–º —Å–µ–π—á–∞—Å –ø–æ–≥–æ–¥–∞", reply_markup=keyboard)


# ----- –û—Ç–º–µ–Ω–∞ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥ /end
@bot.message_handler(commands=["–û—Ç–º–µ–Ω–∞", "–û–¢–ú–ï–ù–ê", "–æ—Ç–º–µ–Ω–∞", "end", "END", "End", "/"])
def end(message):

    user_id = str(message.from_user.id)
    user_marker[user_id] = 1
    predict_marker[user_id] = 0

    buttons = [
        types.InlineKeyboardButton('–ü–æ–≥–æ–¥–∞', callback_data='weather'),
        types.InlineKeyboardButton('–ö—É—Ä—Å –≤–∞–ª—é—Ç', callback_data='list'),
        types.InlineKeyboardButton('–ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä', callback_data='multy'),
        types.InlineKeyboardButton('–ö—É—Ä—Å USD/EUR', callback_data='UsdEur')
    ]
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    keyboard.add(*buttons)

    bot.send_message(message.chat.id, "‚õî –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –∑–∞–≤–µ—Ä—à–µ–Ω–æ.", reply_markup=keyboard)

# = = = –†–µ–∞–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫–∏ = = =
@bot.callback_query_handler(func=lambda call: True)
def callback_worker(call):

    user_id = str(call.from_user.id)

    if call.message:
        # ----- –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ "–ú–µ–Ω—é"
        if call.data == "menu":
            buttons = [
                types.InlineKeyboardButton('–û–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥', callback_data='info'),
                types.InlineKeyboardButton('–ö—É—Ä—Å –≤–∞–ª—é—Ç', callback_data='list'),
                types.InlineKeyboardButton('–ü–æ–≥–æ–¥–∞', callback_data='weather'),
                types.InlineKeyboardButton('–ö—É—Ä—Å USD/EUR', callback_data='UsdEur')
            ]
            keyboard = types.InlineKeyboardMarkup(row_width=2)
            keyboard.add(*buttons)

            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                  text=MENU, reply_markup=keyboard)

        # ----- –ö–Ω–æ–ø–∫–∞ –°–ø—Ä–∞–≤–∫–∞
        elif call.data == "help":

            buttons = [
                types.InlineKeyboardButton('–ú–µ–Ω—é', callback_data='menu'),
                types.InlineKeyboardButton('–û–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥', callback_data='info'),
                types.InlineKeyboardButton('–ö—É—Ä—Å –≤–∞–ª—é—Ç', callback_data='list'),
                types.InlineKeyboardButton('–ü–æ–≥–æ–¥–∞', callback_data='weather')
            ]
            keyboard = types.InlineKeyboardMarkup(row_width=2)
            keyboard.add(*buttons)
            # bot.send_message(call.message.chat.id, HELP, reply_markup=keyboard)
            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                              text=HELP, reply_markup=keyboard)

        # -----–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ö–Ω–æ–ø–∫–∞ "–û—Ç–º–µ–Ω–∞" - –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥
        elif call.data == "cancel":

            user_marker[user_id] = 1
            predict_marker[user_id] = 0

            buttons = [
                types.InlineKeyboardButton('–ü–æ–≥–æ–¥–∞', callback_data='weather'),
                types.InlineKeyboardButton('–ö—É—Ä—Å –≤–∞–ª—é—Ç', callback_data='list'),
                types.InlineKeyboardButton('–ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä', callback_data='multy'),
                types.InlineKeyboardButton('–ö—É—Ä—Å USD/EUR', callback_data='UsdEur')
            ]
            keyboard = types.InlineKeyboardMarkup(row_width=2)  # –Ω–∞—à–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ (–∫–æ–ª-–≤–æ –∫–Ω–æ–ø–æ–∫ –≤ —Ä—è–¥)
            keyboard.add(*buttons)
            bot.send_message(call.message.chat.id, "‚õî –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –∑–∞–≤–µ—Ä—à–µ–Ω–æ.", reply_markup=keyboard)

        # ----- –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∞ "Info" –û–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥
        elif call.data == 'info':
            buttons = [
                types.InlineKeyboardButton('–ú–µ–Ω—é', callback_data='menu'),
                types.InlineKeyboardButton('–ö—É—Ä—Å –≤–∞–ª—é—Ç', callback_data='list'),
                types.InlineKeyboardButton('–ü–æ–≥–æ–¥–∞', callback_data='weather'),
                types.InlineKeyboardButton('–ö—É—Ä—Å USD/EUR', callback_data='UsdEur')
            ]
            keyboard = types.InlineKeyboardMarkup(row_width=2)  # –Ω–∞—à–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ (–∫–æ–ª-–≤–æ –∫–Ω–æ–ø–æ–∫ –≤ —Ä—è–¥)
            keyboard.add(*buttons)

            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                  text=INFO, reply_markup=keyboard)

        # ----- –ö–Ω–æ–ø–∫–∞ –∫—É—Ä—Å –≤–∞–ª—é—Ç USD / EUR
        elif call.data == "UsdEur":

            user_marker[user_id] = 1

            buttons = [
                types.InlineKeyboardButton('–°–ø–∏—Å–æ–∫ –≤–∞–ª—é—Ç', callback_data='list'),
                types.InlineKeyboardButton('–ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä', callback_data='multy'),
                types.InlineKeyboardButton('–ü–æ–≥–æ–¥–∞', callback_data='weather'),
                types.InlineKeyboardButton('–û–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥', callback_data='info')
            ]
            keyboard = types.InlineKeyboardMarkup(row_width=2)
            keyboard.add(*buttons)

            bot.send_message(call.message.chat.id,  usd_eur(), reply_markup=keyboard)

        # ----- –ö–Ω–æ–ø–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä –≤–∞–ª—é—Ç jpy-usd
        elif call.data == "multy":

            user_marker[user_id] = 1

            text = '‚ôªÔ∏è –ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä –≤–∞–ª—é—Ç:\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –¥–≤—É—Ö –≤–∞–ª—é—Ç –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —á–µ—Ä–µ–∑ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å' \
                   '(—Ç–∏—Ä–µ, –ø—Ä–æ–±–µ–ª, —Ç–æ—á–∫–∞)\n(–ü—Ä–∏–º–µ—Ä: usd-eur, AUD . NOK, Czk Zar)'
            buttons = [
                types.InlineKeyboardButton('–°–ø–∏—Å–æ–∫ –≤–∞–ª—é—Ç', callback_data='list'),
                types.InlineKeyboardButton('–ö—É—Ä—Å USD/EUR', callback_data='UsdEur'),
                types.InlineKeyboardButton('–ü–æ–≥–æ–¥–∞', callback_data='weather'),
                types.InlineKeyboardButton('–û–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥', callback_data='info')
            ]
            keyboard = types.InlineKeyboardMarkup(row_width=2)
            keyboard.add(*buttons)

            bot.send_message(call.message.chat.id, text, reply_markup=keyboard)

        # ----- –ö–Ω–æ–ø–∫–∞ –°–ø–∏—Å–æ–∫ –≤–∞–ª—é—Ç
        elif call.data == 'list':

            user_marker[user_id] = 1

            buttons = [
                types.InlineKeyboardButton('–ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä', callback_data='multy'),
                types.InlineKeyboardButton('–ö—É—Ä—Å USD/EUR', callback_data='UsdEur'),
                types.InlineKeyboardButton('–ü–æ–≥–æ–¥–∞', callback_data='weather'),
                types.InlineKeyboardButton('–û–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥', callback_data='info')
            ]
            keyboard = types.InlineKeyboardMarkup(row_width=2)
            keyboard.add(*buttons)

            bot.send_message(call.message.chat.id, f'üîñ –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∞–ª—é—Ç:\n{list_curr()}', reply_markup=keyboard)

        # ----- –ö–Ω–æ–ø–∫–∞ –ü–æ–≥–æ–¥–∞
        elif call.data == 'weather':
            user_marker[user_id] = 2
            predict_marker[user_id] = 0

            buttons = [
                types.InlineKeyboardButton('–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã', callback_data='predict'),
                types.InlineKeyboardButton('–û–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥', callback_data='info'),
                types.InlineKeyboardButton('–ö—É—Ä—Å –≤–∞–ª—é—Ç', callback_data='list'),
                types.InlineKeyboardButton('–ö—É—Ä—Å USD/EUR', callback_data='UsdEur')
            ]
            keyboard = types.InlineKeyboardMarkup(row_width=2)
            keyboard.add(*buttons)

            bot.send_message(call.message.chat.id, "üîÆ –ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞, –∏ —è –ø–æ–∫–∞–∂—É –∫–∞–∫–∞—è —Ç–∞–º —Å–µ–π—á–∞—Å –ø–æ–≥–æ–¥–∞",
                             reply_markup=keyboard)

        # ----- –ö–Ω–æ–ø–∫–∞ –ü—Ä–æ–≥–Ω–æ–∑ –ü–æ–≥–æ–¥—ã –Ω–∞ 5 –¥–Ω–µ–π
        elif call.data == 'predict':
            user_marker[user_id] = 2
            predict_marker[user_id] = 1

            buttons = [
                types.InlineKeyboardButton('–û—Ç–º–µ–Ω–∞', callback_data='cancel'),
                types.InlineKeyboardButton('–ö—É—Ä—Å –≤–∞–ª—é—Ç', callback_data='list'),
                types.InlineKeyboardButton('–ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä', callback_data='multy'),
                types.InlineKeyboardButton('–ö—É—Ä—Å USD/EUR', callback_data='UsdEur')
            ]
            keyboard = types.InlineKeyboardMarkup(row_width=2)
            keyboard.add(*buttons)

            bot.send_message(call.message.chat.id, "üîÆ –ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞, –∏ —è –ø–æ–∫–∞–∂—É –∫–∞–∫–∞—è —Ç–∞–º —Å–µ–π—á–∞—Å –ø–æ–≥–æ–¥–∞",
                             reply_markup=keyboard)


        bot.answer_callback_query(callback_query_id=call.id)  # –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω–æ–≥–æ callback-–∑–∞–ø—Ä–æ—Å–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.


# = = = –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ = = =
@bot.message_handler(content_types=["text"])
def echo(message):

    user_id = str(message.from_user.id)
    user_marker.setdefault(user_id, 2)
    predict_marker.setdefault(user_id, 0)


    # word = message.text.upper().replace(" ", "")
    # word = message.text.upper().strip()

    word = message.text.strip()

    # ---–°—Ü–µ–Ω–∞—Ä–∏–π - –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥
    if word == "/":

        user_marker[user_id] = 1
        predict_marker[user_id] = 0

        buttons = [
            types.InlineKeyboardButton('–ü–æ–≥–æ–¥–∞', callback_data='weather'),
            types.InlineKeyboardButton('–ö—É—Ä—Å –≤–∞–ª—é—Ç', callback_data='list'),
            types.InlineKeyboardButton('–ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä', callback_data='multy'),
            types.InlineKeyboardButton('–ö—É—Ä—Å USD/EUR', callback_data='UsdEur')
        ]
        keyboard = types.InlineKeyboardMarkup(row_width=2)  # –Ω–∞—à–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ (–∫–æ–ª-–≤–æ –∫–Ω–æ–ø–æ–∫ –≤ —Ä—è–¥)
        keyboard.add(*buttons)
        bot.send_message(message.chat.id, "‚õî –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –∑–∞–≤–µ—Ä—à–µ–Ω–æ.", reply_markup=keyboard)

    # ----- —Å—Ü–µ–Ω–∞—Ä–∏–π –ü–æ–≥–æ–¥–∞
    elif user_marker[user_id] == 2:

        city_name = word.lower().replace(" ", "")
        # –∑–∞–ø—Ä–æ—Å –∫ —Å–µ—Ä–≤–µ—Ä—É –ø–æ–≥–æ–¥—ã
        data = api_weather(city_name)

        buttons = [
            types.InlineKeyboardButton('–ü–æ–≥–æ–¥–∞', callback_data='weather'),
            types.InlineKeyboardButton('–ö—É—Ä—Å –≤–∞–ª—é—Ç', callback_data='list'),
            types.InlineKeyboardButton('–û—Ç–º–µ–Ω–∞', callback_data='cancel'),
            types.InlineKeyboardButton('–û–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥', callback_data='info')
        ]
        keyboard = types.InlineKeyboardMarkup(row_width=2)
        keyboard.add(*buttons)

        if data == "error":
            bot.send_message(message.chat.id, f'‚ùå C–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.\n–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –ø–æ–∑–∂–µ...‚è≥', reply_markup=keyboard)

        elif data.get("name") is None:
            bot.send_message(message.chat.id, f'‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞', reply_markup=keyboard)

        else:
        #  –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–∞—Ç
            if predict_marker[user_id] == 1:
                # –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≥–æ—Ä–æ–¥–∞ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
                lon = data["coord"]["lon"]  # –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≥–æ—Ä–æ–¥–∞
                lat = data["coord"]["lat"]  # –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≥–æ—Ä–æ–¥–∞
                city = data["name"]  # –≥–æ—Ä–æ–¥
                data = api_predicat(lat, lon)

                text = ""
                for dt, line in data.items():
                    text = f'{text}{dt}\n'
                    for hours, parm in line.items():
                        text = f'{text}{hours}: {parm}'
                    text = f'{text}\n'

                buttons = [
                    types.InlineKeyboardButton('–ü–æ–≥–æ–¥–∞ —Å–µ–π—á–∞—Å', callback_data='weather'),
                    types.InlineKeyboardButton('–ö—É—Ä—Å –≤–∞–ª—é—Ç', callback_data='list'),
                    types.InlineKeyboardButton('–û—Ç–º–µ–Ω–∞', callback_data='cancel'),
                    types.InlineKeyboardButton('–û–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥', callback_data='info')
                ]
                keyboard = types.InlineKeyboardMarkup(row_width=2)
                keyboard.add(*buttons)

                bot.send_message(message.chat.id, f'–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –≤ –≥–æ—Ä–æ–¥–µ {city}:\n{text}', reply_markup=keyboard)

        #  –ø–æ–≥–æ–¥–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
            elif predict_marker[user_id] == 0:

                # –¥–ª—è –≤—ã–≤–æ–¥–∞ –¥–∞—Ç—ã –∏ —á–∞—Å–æ–≤
                # ------------------------------- –ø–æ–≥–æ–¥–∞ –ø–æ –ú–æ—Å–∫–µ + 3 —á–∞—Å–∞ –¥–ª—è replIt
                # delta = int(datetime.datetime.fromtimestamp(timezone).strftime('%H'))
                # dt_obj = datetime.datetime.now() + datetime.timedelta(hours=delta)
                # ---------------------------------------------------------------------

                dt_obj = datetime.datetime.fromtimestamp( int(data["dt"]) + int(data["timezone"]) - time_mow)   #.strftime('%Y-%m-%d %H:%M:%S')
                # dt_obj = datetime.datetime.now() #.strftime('%Y-%m-%d %H:%M:%S')

                # dt_obj = datetime.datetime.fromtimestamp(int(data["dt"]) + int(data["timezone"]))  # –¥–ª—è ReplIT —É—á–µ—Ç —á–∞—Å.–ø–æ—è—Å–æ–≤

                int_Hours = int(datetime.datetime.strftime(dt_obj, '%H'))
                # int_Min = str(datetime.datetime.strftime(dt_obj, '%M'))
                int_Mon = int(datetime.datetime.strftime(dt_obj, '%m'))
                int_Day = int(datetime.datetime.strftime(dt_obj, '%d'))


                text_data = f'{int_Day} {month_list[int_Mon - 1]}'
                #  —Å–º–∞–π–ª –¥–ª—è —á–∞—Å–æ–≤
                if int_Hours < 5:
                    p_time = f'üåë'
                elif int_Hours < 10:
                    p_time = f'üåó'
                elif int_Hours < 17:
                    p_time = f'üåïÔ∏è'
                else:
                    p_time = f'üåìÔ∏è'
                #  - –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞ reolIT  –≤–æ–∑—Ä–∞—â–∞–µ—Ç—Å—è –≤—Ä–µ–º—è –º–∏–Ω—Å 3 —á–∞—Å–∞ datetime.datetime.now()
                # text_time = f"{p_time} {text_data} {datetime.datetime.now().strftime('%H:%M')}"

                text_time = f"{p_time} {text_data}"

                                 #  –ø–∞—Ä—Å–∏–º JSON –∑–∞–ø—Ä–æ—Å –ø–æ–≥–æ–¥—ã
                city = data["name"]  # –≥–æ—Ä–æ–¥
                temp_avg = float(data["main"]["temp"])  # —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ —Å—Ä–µ–¥–Ω—è—è
                temp_min = float(data["main"]["temp_min"])  # —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ min
                temp_max = float(data["main"]["temp_max"])  # —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ max
                temp_feels = float(data["main"]["feels_like"])  # —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –ø–æ –æ—â—É—â–µ–Ω–∏—è–º
                humidity = data["main"]["humidity"]  # –≤–ª–∞–∂–Ω–æ—Å—Ç—å
                pressure = float(data["main"]["pressure"])  # –¥–∞–≤–ª–µ–Ω–∏–µ –≥–µ–∫—Ç–æ–ø–∞—Å–∫–∞–ª—å / 1,333
                wind = rose_wind(data["wind"])  # —Å–ª–æ–≤–∞—Ä—å —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –≤–µ—Ä—Ç—Ä–∞ –≤ —Ñ—É–Ω–∫—Ü–∏—é

                # wind = data["wind"]["speed"]                    # –≤–µ—Ç–µ—Ä —Å–∫–æ—Ä–æ—Å—Ç—å
                # rose_w = rose_wind( int(data["wind"]["deg"]) )  # –Ω–∞—Ä–ø–∞–≤–ª–µ–Ω–∏–µ –≤–µ—Ç—Ä–∞

                # temp_smile(round(temp_feels, 1))
                cur_weather = f'{round(temp_min, 1)}¬∞...{round(temp_max, 1)}¬∞C,' \
                      f' –æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ {round(temp_feels, 1)}¬∞C {temp_smile(round(temp_feels, 1))}'  # —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞

                # –ø–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è —Ä–∞—Å—Å–≤–µ—Ç–∞ –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –µ–≥–æ –≤ —á–∏—Ç–∞–±–µ–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
                sunrise_timestamp = datetime.datetime.fromtimestamp(data["sys"]["sunrise"]).strftime('%H:%M')
                # bot.send_message(message.chat.id, sunrise_timestamp.strftime('%H:%M') )

                # —Ç–æ –∂–µ —Å–∞–º–æ–µ –ø—Ä–æ–¥–µ–ª–∞–µ–º —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º –∑–∞–∫–∞—Ç–∞
                sunset_timestamp = datetime.datetime.fromtimestamp(data["sys"]["sunset"]).strftime('%H:%M')
                # –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–Ω—è
                length_of_the_day = datetime.datetime.fromtimestamp(data["sys"]["sunset"]) - \
                                    datetime.datetime.fromtimestamp(data["sys"]["sunrise"])

                # –ø–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–≥–æ–¥—ã –¥–ª—è —Å–º–∞–π–ª–∞
                weather_description = data["weather"][0]["main"]

                if weather_description in code_to_smile:
                    wd = code_to_smile[weather_description]
                else:
                    # –µ—Å–ª–∏ —ç–º–æ–¥–∑–∏ –¥–ª—è –ø–æ–≥–æ–¥—ã –Ω–µ—Ç, –≤—ã–≤–æ–¥–∏–º –¥—Ä—É–≥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    wd = "–ü–æ—Å–º–æ—Ç—Ä–∏–º –≤ –æ–∫–Ω–æ, —è –Ω–µ –ø–æ–Ω–∏–º–∞—é, —á—Ç–æ —Ç–∞–º –∑–∞ –ø–æ–≥–æ–¥–∞...\U0001F32A"

                buttons = [
                    types.InlineKeyboardButton('–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã', callback_data='predict'),
                    types.InlineKeyboardButton('–û–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥', callback_data='info'),
                    types.InlineKeyboardButton('–ö—É—Ä—Å –≤–∞–ª—é—Ç', callback_data='list'),
                    types.InlineKeyboardButton('–ö—É—Ä—Å USD/EUR', callback_data='UsdEur')
                ]
                keyboard = types.InlineKeyboardMarkup(row_width=2)
                keyboard.add(*buttons)

                bot.send_message(message.chat.id,
                     f"{text_time}\n–í –≥–æ—Ä–æ–¥–µ {city}: {datetime.datetime.strftime(dt_obj, '%H:%M')}...{wd}\n"
                     f"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {cur_weather}\n"
                     f"–í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%\n–î–∞–≤–ª–µ–Ω–∏–µ: {round(pressure / 1.333, 1)} –º–º.—Ä—Ç.—Å—Ç\n–í–µ—Ç–µ—Ä –º/—Å: {wind}\n"
                     f"–í–æ—Å—Ö–æ–¥ —Å–æ–ª–Ω—Ü–∞: {sunrise_timestamp}\n–ó–∞–∫–∞—Ç —Å–æ–ª–Ω—Ü–∞: {sunset_timestamp}\n–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–Ω—è: {length_of_the_day}\n",
                     reply_markup=keyboard)

                # bot.send_message(message.chat.id,
                #      f"–ü–æ–≥–æ–¥–∞ –Ω–∞ {datetime.datetime.now().strftime('%Y-%m-%d %H:%M')}:\n"
                #      f"–í –≥–æ—Ä–æ–¥–µ: {city}\n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {cur_weather}\n{wd}\n"
                #      f"–í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%\n–î–∞–≤–ª–µ–Ω–∏–µ: {round(pressure / 1.333, 1)} –º–º.—Ä—Ç.—Å—Ç\n–í–µ—Ç–µ—Ä –º/—Å: {wind}\n"
                #      f"–í–æ—Å—Ö–æ–¥ —Å–æ–ª–Ω—Ü–∞: {sunrise_timestamp}\n–ó–∞–∫–∞—Ç —Å–æ–ª–Ω—Ü–∞: {sunset_timestamp}\n–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–Ω—è: {length_of_the_day}\n"
                #      , reply_markup=keyboard)

    # ---–°—Ü–µ–Ω–∞—Ä–∏–π –∫—É—Ä—Å –≤–∞–ª—é—Ç
    elif user_marker[user_id] == 1:

        curr_rate = word.upper()
        valute = dict_curr()  # –∑–∞–ø—Ä–æ—Å —Å–ª–æ–≤–∞—Ä—è –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏

        # --- –ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä –≤–∞–ª—é—Ç (–µ—Å–ª–∏ –±–æ–ª—å—à–µ 3 —Å–∏–º–≤–æ–ª–æ–≤ –≤ –∑–∞–ø—Ä–æ—Å–µ)  üö´‚ôªÔ∏è
        if len(curr_rate) > 3 and ("-" in curr_rate or "." in curr_rate or " " in curr_rate):
            delimiters = r"[ -.]+"
            text_ = re.split(delimiters,  curr_rate)

            valute_1 = text_[0].upper().strip()
            valute_2 = text_[1].upper().strip()

            buttons = [
                types.InlineKeyboardButton('–°–ø–∏—Å–æ–∫ –≤–∞–ª—é—Ç', callback_data='list'),
                types.InlineKeyboardButton('–ö—É—Ä—Å USD/EUR', callback_data='UsdEur'),
                types.InlineKeyboardButton('–ü–æ–≥–æ–¥–∞', callback_data='weather'),
                types.InlineKeyboardButton('–û–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥', callback_data='info')
            ]
            keyboard = types.InlineKeyboardMarkup(row_width=2)  # –Ω–∞—à–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ (–∫–æ–ª-–≤–æ –∫–Ω–æ–ø–æ–∫ –≤ —Ä—è–¥)
            keyboard.add(*buttons)

            if valute.get(valute_1) is not None and valute.get(valute_2) is not None:

                # –∑–Ω–∞—á–æ–∫ –≤–∞–ª—é—Ç—ã –∏–∑ —Å–ª–æ–≤–∞—Ä—è
                if dict_symbol.get(valute_1) is None:
                    sym_1 = ""
                else:
                    sym_1 = dict_symbol[valute_1]

                if dict_symbol.get(valute_2) is None:
                    sym_2 = ""
                else:
                    sym_2 = dict_symbol[valute_2]

                text_0 = f'üí∏ –ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä –≤–∞–ª—é—Ç:\n {sym_1} {valute[valute_1][0]} - {sym_2} {valute[valute_2][0]}\n'

                convert = round( float( valute[valute_1][1] ) * float( valute[valute_2][3] ) / float( valute[valute_2][1] ), 2)

                text_1 = f'{valute[valute_1][3]} {sym_1} ({valute_1}) = {convert} {sym_2} ({valute_2})'

                bot.send_message(message.chat.id, text_0 + text_1, reply_markup=keyboard)
            else:

                bot.send_message(message.chat.id, f'üö´ –ù–∞–∑–≤–∞–Ω–∏—è –≤–∞–ª—é—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.\n'
                        f'–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è, –∏ –Ω–∞–ª–∏—á–∏–µ –≤–∞–ª—é—Ç—ã –≤ —Å–ø–∏—Å–∫–µ /list', reply_markup=keyboard)

        #- --- –∫—É—Ä—Å –æ–¥–Ω–æ–π –≤–∞–ª—é—Ç—ã, –µ—Å–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞–ª—é—Ç—ã –µ—Å—Ç—å –≤ —Å–ª–æ–≤–∞—Ä–µ:  { EUR :[–ï–≤—Ä–æ, 79.4966, 79.6765, 1,]}
        #                                                           { Word:[ 0(–∏–º—è)  1(—Å–µ–≥–æ–¥–Ω—è) 2(–≤—á–µ—Ä–∞) 3(–Ω–æ–º–∏–Ω–∞–ª)]}
        elif valute.get(word) is not None:

            buttons = [
                types.InlineKeyboardButton('–ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä', callback_data='multy'),
                types.InlineKeyboardButton('–ö—É—Ä—Å USD/EUR', callback_data='UsdEur'),
                types.InlineKeyboardButton('–ü–æ–≥–æ–¥–∞', callback_data='weather'),
                types.InlineKeyboardButton('–û–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥', callback_data='info')
            ]
            keyboard = types.InlineKeyboardMarkup(row_width=2)  # –Ω–∞—à–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ (–∫–æ–ª-–≤–æ –∫–Ω–æ–ø–æ–∫ –≤ —Ä—è–¥)
            keyboard.add(*buttons)

            bot.send_message(message.chat.id, full_curr(word), reply_markup=keyboard)

        #  –∫–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞
        else:
            buttons = [
                types.InlineKeyboardButton('–°–ø–∏—Å–æ–∫ –≤–∞–ª—é—Ç', callback_data='list'),
                types.InlineKeyboardButton('–ö—É—Ä—Å USD/EUR', callback_data='UsdEur'),
                types.InlineKeyboardButton('–ü–æ–≥–æ–¥–∞', callback_data='weather'),
                types.InlineKeyboardButton('–û–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥', callback_data='info')
            ]
            keyboard = types.InlineKeyboardMarkup(row_width=2)  # –Ω–∞—à–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ (–∫–æ–ª-–≤–æ –∫–Ω–æ–ø–æ–∫ –≤ —Ä—è–¥)
            keyboard.add(*buttons)
            bot.send_message(message.chat.id, f'üö´ –ù–∞–∑–≤–∞–Ω–∏—è –≤–∞–ª—é—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.\n'
                                              f'–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è, –∏ –Ω–∞–ª–∏—á–∏–µ –≤–∞–ª—é—Ç—ã –≤ —Å–ø–∏—Å–∫–µ /list',
                             reply_markup=keyboard)

    # --- –°—Ü–µ–Ω–∞—Ä–∏–π –∫–æ–º–∞–Ω–¥—ã –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ
    else:
        _text = ('‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.')
        buttons = [
            types.InlineKeyboardButton('–ú–µ–Ω—é', callback_data='menu'),
            types.InlineKeyboardButton('–û–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥', callback_data='info'),
            types.InlineKeyboardButton('–ü–æ–≥–æ–¥–∞', callback_data='weather'),
            types.InlineKeyboardButton('–ö—É—Ä—Å –≤–∞–ª—é—Ç—ã', callback_data='curr')
        ]
        keyboard = types.InlineKeyboardMarkup(row_width=2)  # –Ω–∞—à–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ (–∫–æ–ª-–≤–æ –∫–Ω–æ–ø–æ–∫ –≤ —Ä—è–¥)
        keyboard.add(*buttons)

        if user_marker[user_id] == 2:
            bot.send_message(message.chat.id, f'{_text}.\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞', reply_markup=keyboard)
        else:

            bot.send_message(message.chat.id, _text, reply_markup=keyboard)


# =========================================#
# –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ —á–∞—Å—Ç—è–º
# todos = log_qyery.json()['Valute']   # –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON
#     if len(str(todos)) > 4096:
#         for x in range(0, len(str(todos)), 4096):
#             bot.send_message(message.chat.id, str(todos)[x:x + 4096])
#     else:
#         bot.send_message(message.chat.id, str(todos))
# -=================


# keep_alive()  #–∑–∞–ø—É—Å–∫–∞–µ–º flask-—Å–µ—Ä–≤–µ—Ä
# while True:
#   try:
#     bot.polling(none_stop=True)
#   except Exception as _ex:
#     print(_ex)
#     time.sleep(15)

# bot.polling(none_stop=True)


while True:
  try:
    bot.polling(none_stop=True)
  except Exception as _ex:
    # print(_ex)
    time.sleep(15)